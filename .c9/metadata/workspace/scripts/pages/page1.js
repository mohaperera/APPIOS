{"changed":true,"filter":false,"title":"page1.js","tooltip":"/scripts/pages/page1.js","value":"// get generetad UI code\nvar page1 = require('../ui/page1');\nmodule.exports = page1;\n// perform your event bindings\n// modifications to the UI below\n\npage1.onKeyPress = page1_onKeyPress;\n\n// generated UI assigns a onShow event for the page\n// If you want to perform some actions at onShow event\n// You need to backup generated function and call it\n// like in the example below:\nvar originalOnShow = page1.onShow; //backup\npage1.onShow = page1_onShow;\n\n\n// child components of page are exposed as a member of page\npage1.btn.onPressed = btn_onPressed;\n(Device.deviceOS === \"Android\") && (page1.btn.effects.ripple.enabled = true);\n\n\n//in order to access the second page you need to require it first\nvar page2 = require(\"./page2\");\npage1.btnNext.onPressed = function(e) {\n\tpage2.show();\n\t// Pages.page2 is equal to page2\n};\n\n\nfunction page1_onKeyPress(e) {\n\tif (e.keyCode === 4) {\n\t\tApplication.exit();\n\t}\n}\n\n/**\n * Creates action(s) that are run when the page is appeared\n * @param {EventArguments} e Returns some attributes about the specified functions\n * @this Pages.page1\n */\nfunction page1_onShow() {\n\t// call the backedup function;\n\toriginalOnShow();\n\n}\n\nvar btnClickCount = 0;\n\n/**\n * Creates action(s) that are run when the object is pressed from device's screen.\n * @param {EventArguments} e Returns some attributes about the specified functions\n * @this page1.TextButton1\n */\nfunction btn_onPressed(e) {\n\tvar myLabelText = \"\";\n\tvar myButtonText = \"\";\n\n\tbtnClickCount += 1;\n\n\tswitch (true) {\n\t\tcase btnClickCount == 1:\n\t\t\tmyLabelText = \"Well Done! \\nYou've clicked the button!\";\n\t\t\tmyButtonText = \"Click me again!\";\n\t\t\tbreak;\n\t\tcase btnClickCount < 10:\n\t\t\tmyLabelText = \"Whoa!\\nThat click was \" + numberSuffix(btnClickCount) + \" time!\";\n\t\t\tmyButtonText = \"Click again?\";\n\t\t\tbreak;\n\t\tcase btnClickCount < 15:\n\t\t\tmyLabelText = \"Feel tired?\\nYou can rest your finger now :)\";\n\t\t\tmyButtonText = \"I'm not tired!\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmyLabelText = \"Isn't it good?\\nEvery clicks count, you've clicked \" + numberSuffix(btnClickCount) + \" time!\";\n\t\t\tmyButtonText = \"Click again?\";\n\t\t\tbreak;\n\t}\n\n\tpage1.lbl.text = myLabelText;\n\tpage1.btn.text = myButtonText;\n}\n\n/**\n *Adds appropriate suffix to given number.\n */\nfunction numberSuffix(number) {\n\n\tvar suffix = \"th\";\n\n\t//Lets deal with small numbers\n\tvar smallNumber = number % 100;\n\n\tif (smallNumber < 11 || smallNumber > 13) {\n\t\tswitch (smallNumber % 10) {\n\t\t\tcase 1:\n\t\t\t\tsuffix = 'st';\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsuffix = 'nd';\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tsuffix = 'rd';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn number + suffix;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction checkforUpdate() {\n    //Checks if there is a valid update. If yes returns result object.    \n    Application.checkUpdate(function(err, result) {\n        if (err) {\n            //Checking for update is failed\n            //alert(\"check update error: \" + err);\n        }\n        else {\n            //Update is successful. We can show the meta info to inform our app user.\n            if (result.meta) {\n                var isMandatory = (result.meta.isMandatory && result.meta.isMandatory === true) ? true : false;\n                var updateTitle = (result.meta.title) ? result.meta.title : 'A new update is ready!';\n                var updateMessage = \"Version \" + result.newVersion + \" is ready to install.\\n\\n\" +\n                    \"What's new?:\\n\" + JSON.stringify(result.meta.update) +\n                    \"\\n\\n\"\n                //adding mandatory status  \n                updateMessage += (isMandatory) ? \"This update is mandatory!\" : \"Do you want to update?\";\n                //Function will run on users' approve\n                function onFirstButtonPressed() {\n                    if (result.meta.redirectURL && result.meta.redirectURL.length != 0) {\n                        //RaU wants us to open a URL, most probably core/player updated and binary changed.\n                        SMF.Net.browseOut(result.meta.redirectURL);\n                    }\n                    else {\n                        //There is an update waiting to be downloaded. Let's download it.\n                        result.download(function(err, result) {\n                            if (err) {\n                                //Download failed\n                                alert(\"Autoupdate download failed: \" + err);\n                            }\n                            else {\n                                //All files are received, we'll trigger an update.\n                                result.updateAll(function(err) {\n                                    if (err) {\n                                        //Updating the app with downloaded files failed\n                                        alert(\"Autoupdate update failed: \" + err);\n                                    }\n                                    else {\n                                        //After that the app will be restarted automatically to apply the new updates\n                                        Application.restart();\n                                    }\n                                });\n                            }\n                        });\n                    }\n                }\n                //We will do nothing on cancel for the timebeing.\n                function onSecondButtonPressed() {\n                    //do nothing\n                }\n                //if Update is mandatory we will show only Update now button.\n                if (isMandatory) {\n                    alert({\n                        title: updateTitle,\n                        message: updateMessage,\n                        firstButtonText: \"Update now\",\n                        onFirstButtonPressed: onFirstButtonPressed\n                    });\n                }\n                else {\n                    alert({\n                        title: updateTitle,\n                        message: updateMessage,\n                        firstButtonText: \"Update now\",\n                        secondButtonText: \"Later\",\n                        onFirstButtonPressed: onFirstButtonPressed,\n                        onSecondButtonPressed: onSecondButtonPressed\n                    });\n                }\n            }\n        }\n    });\n}","undoManager":{"mark":-2,"position":18,"stack":[[{"start":{"row":107,"column":0},"end":{"row":108,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":108,"column":0},"end":{"row":109,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":109,"column":0},"end":{"row":110,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":110,"column":0},"end":{"row":111,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":111,"column":0},"end":{"row":112,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":112,"column":0},"end":{"row":113,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":113,"column":0},"end":{"row":114,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":114,"column":0},"end":{"row":115,"column":0},"action":"insert","lines":["",""],"id":11}],[{"start":{"row":115,"column":0},"end":{"row":116,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":116,"column":0},"end":{"row":117,"column":0},"action":"insert","lines":["",""],"id":13}],[{"start":{"row":117,"column":0},"end":{"row":118,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":118,"column":0},"end":{"row":119,"column":0},"action":"insert","lines":["",""],"id":15}],[{"start":{"row":119,"column":0},"end":{"row":120,"column":0},"action":"insert","lines":["",""],"id":16}],[{"start":{"row":120,"column":0},"end":{"row":121,"column":0},"action":"insert","lines":["",""],"id":17}],[{"start":{"row":121,"column":0},"end":{"row":122,"column":0},"action":"insert","lines":["",""],"id":18}],[{"start":{"row":122,"column":0},"end":{"row":123,"column":0},"action":"insert","lines":["",""],"id":19}],[{"start":{"row":123,"column":0},"end":{"row":124,"column":0},"action":"insert","lines":["",""],"id":20}],[{"start":{"row":124,"column":0},"end":{"row":125,"column":0},"action":"insert","lines":["",""],"id":21}],[{"start":{"row":125,"column":0},"end":{"row":197,"column":1},"action":"insert","lines":["function checkforUpdate() {","    //Checks if there is a valid update. If yes returns result object.    ","    Application.checkUpdate(function(err, result) {","        if (err) {","            //Checking for update is failed","            //alert(\"check update error: \" + err);","        }","        else {","            //Update is successful. We can show the meta info to inform our app user.","            if (result.meta) {","                var isMandatory = (result.meta.isMandatory && result.meta.isMandatory === true) ? true : false;","                var updateTitle = (result.meta.title) ? result.meta.title : 'A new update is ready!';","                var updateMessage = \"Version \" + result.newVersion + \" is ready to install.\\n\\n\" +","                    \"What's new?:\\n\" + JSON.stringify(result.meta.update) +","                    \"\\n\\n\"","                //adding mandatory status  ","                updateMessage += (isMandatory) ? \"This update is mandatory!\" : \"Do you want to update?\";","                //Function will run on users' approve","                function onFirstButtonPressed() {","                    if (result.meta.redirectURL && result.meta.redirectURL.length != 0) {","                        //RaU wants us to open a URL, most probably core/player updated and binary changed.","                        SMF.Net.browseOut(result.meta.redirectURL);","                    }","                    else {","                        //There is an update waiting to be downloaded. Let's download it.","                        result.download(function(err, result) {","                            if (err) {","                                //Download failed","                                alert(\"Autoupdate download failed: \" + err);","                            }","                            else {","                                //All files are received, we'll trigger an update.","                                result.updateAll(function(err) {","                                    if (err) {","                                        //Updating the app with downloaded files failed","                                        alert(\"Autoupdate update failed: \" + err);","                                    }","                                    else {","                                        //After that the app will be restarted automatically to apply the new updates","                                        Application.restart();","                                    }","                                });","                            }","                        });","                    }","                }","                //We will do nothing on cancel for the timebeing.","                function onSecondButtonPressed() {","                    //do nothing","                }","                //if Update is mandatory we will show only Update now button.","                if (isMandatory) {","                    alert({","                        title: updateTitle,","                        message: updateMessage,","                        firstButtonText: \"Update now\",","                        onFirstButtonPressed: onFirstButtonPressed","                    });","                }","                else {","                    alert({","                        title: updateTitle,","                        message: updateMessage,","                        firstButtonText: \"Update now\",","                        secondButtonText: \"Later\",","                        onFirstButtonPressed: onFirstButtonPressed,","                        onSecondButtonPressed: onSecondButtonPressed","                    });","                }","            }","        }","    });","}"],"id":22}]]},"ace":{"folds":[],"scrolltop":1114.2001132965088,"scrollleft":0,"selection":{"start":{"row":131,"column":9},"end":{"row":131,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":76,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1489598730759}